// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Monitoring.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UnzipFeature : object, Xunit.IClassFixture<UnzipFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Unzip.feature"
#line hidden
        
        public UnzipFeature(UnzipFeature.FixtureData fixtureData, Common_Monitoring_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Unzip", "As a user,\r\nI want to be able to extract zip files,\r\nSo that I can put all etl fi" +
                    "les in one folder.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extract zip files")]
        [Xunit.TraitAttribute("FeatureTitle", "Unzip")]
        [Xunit.TraitAttribute("Description", "Extract zip files")]
        [Xunit.TraitAttribute("Category", "unzip")]
        public void ExtractZipFiles()
        {
            string[] tagsOfScenario = new string[] {
                    "unzip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract zip files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("Given one or more zip files in folder \"C:\\\\zips\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When("I extract zip files to collect etl files to folder \"C:\\\\etls\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("I should see all etl files in folder \"C:\\\\etls\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extract hci logs")]
        [Xunit.TraitAttribute("FeatureTitle", "Unzip")]
        [Xunit.TraitAttribute("Description", "Extract hci logs")]
        [Xunit.TraitAttribute("Category", "unzip")]
        public void ExtractHciLogs()
        {
            string[] tagsOfScenario = new string[] {
                    "unzip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract hci logs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
    testRunner.Given("A zip file at \"%HOME%\\\\Downloads\\\\hci.zip\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
    testRunner.When("I extract \"etl\" files from zip file to folder \"%HOME%\\\\Downloads\\\\hci\\\\etw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.2.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.3.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.4.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.5.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.6.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.7.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Common.Infrastructure.Middleware.2024-10-09.8.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.ECE.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.ECE.2024-10-09.2.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.ECE.2024-10-09.3.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.ECEAgentCommonInfra.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Roles.VirtualMachines.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Roles.VirtualMachines.2024-10-09.2.etl"});
                table10.AddRow(new string[] {
                            "V-HOST1_AzureStack.Update.Admin.2024-10-09.1.etl"});
                table10.AddRow(new string[] {
                            "v-Host1_AzureStackAgentLifecycleAgent.etl"});
                table10.AddRow(new string[] {
                            "v-Host1_lcmControllerLogmanTraces.etl"});
#line 16
    testRunner.Then("I should see the following \"etl\" files in folder \"%HOME%\\\\Downloads\\\\hci\\\\etw\"", ((string)(null)), table10, "Then ");
#line hidden
#line 36
    testRunner.When("I extract \"evtx\" files from zip file to folder \"%HOME%\\\\Downloads\\\\hci\\\\evtx\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table11.AddRow(new string[] {
                            "Event_Microsoft.AzureStack.LCMController.EventSource-Admin.evtx"});
                table11.AddRow(new string[] {
                            "Event_Microsoft-Windows-WinRM-Operational.EVTX"});
                table11.AddRow(new string[] {
                            "Event_Microsoft-Windows-WMI-Activity-Operational.EVTX"});
#line 37
    testRunner.Then("I should see the following \"evtx\" files in folder \"%HOME%\\\\Downloads\\\\hci\\\\evtx\"", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UnzipFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UnzipFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
