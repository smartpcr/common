// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Monitoring.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ETWFeature : object, Xunit.IClassFixture<ETWFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ETW", "As a developer,\r\nI want to be able to write ETW event without specifying provider" +
                " and event name,\r\nSo that I can integrate it with tracing and logging.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EtwEvents.feature"
#line hidden
        
        public ETWFeature(ETWFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate ETW event with provider and event name")]
        [Xunit.TraitAttribute("FeatureTitle", "ETW")]
        [Xunit.TraitAttribute("Description", "Generate ETW event with provider and event name")]
        [Xunit.TraitAttribute("Category", "etw")]
        [Xunit.TraitAttribute("Category", "prod")]
        public async System.Threading.Tasks.Task GenerateETWEventWithProviderAndEventName()
        {
            string[] tagsOfScenario = new string[] {
                    "etw",
                    "prod"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Generate ETW event with provider and event name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "ServiceName",
                            "MethodName",
                            "EventId",
                            "EventName",
                            "Tags",
                            "Latency",
                            "ChildCall"});
                table1.AddRow(new string[] {
                            "FrontEnd",
                            "HandleRequest",
                            "1",
                            "RequestReceived",
                            "{\"path\":\"/products\"}",
                            "1",
                            ""});
                table1.AddRow(new string[] {
                            "FrontEnd",
                            "HandleRequest",
                            "2",
                            "GetProducts",
                            "{\"path\":\"/products\"}",
                            "4",
                            "BackEnd.GetProducts"});
                table1.AddRow(new string[] {
                            "BackEnd",
                            "GetProducts",
                            "3",
                            "BeginGetProducts",
                            "",
                            "10",
                            ""});
                table1.AddRow(new string[] {
                            "BackEnd",
                            "GetProducts",
                            "4",
                            "GetProductsFromCache",
                            "{\"cache_key\": \"/products\"}",
                            "0",
                            "Cache.TryGet"});
                table1.AddRow(new string[] {
                            "Cache",
                            "TryGet",
                            "5",
                            "CacheMiss",
                            "{\"cache_key\": \"/products\", \"found\": false}",
                            "5",
                            ""});
                table1.AddRow(new string[] {
                            "BackEnd",
                            "GetProducts",
                            "6",
                            "GetProductsFromDatabase",
                            "{\"query\": \"SELECT * FROM products\"}",
                            "0",
                            "Database.Query"});
                table1.AddRow(new string[] {
                            "Database",
                            "Query",
                            "7",
                            "BeginQuery",
                            "{\"query\": \"SELECT * FROM products\"}",
                            "50",
                            ""});
                table1.AddRow(new string[] {
                            "Database",
                            "Query",
                            "8",
                            "FinishedQuery",
                            "{\"count\": 15}",
                            "300",
                            ""});
                table1.AddRow(new string[] {
                            "BackEnd",
                            "GetProducts",
                            "9",
                            "UpdateCache",
                            "{\"cache_key\": \"/products\", \"count\": 15}",
                            "20",
                            ""});
                table1.AddRow(new string[] {
                            "BackEnd",
                            "GetProducts",
                            "10",
                            "GetProductsStop",
                            "{\"count\": 15}",
                            "10",
                            ""});
                table1.AddRow(new string[] {
                            "FrontEnd",
                            "HandleRequest",
                            "11",
                            "RequestCompleted",
                            "{\"path\":\"/products\", \"count\": 15, \"status_code\": \"OK\"}",
                            "20",
                            ""});
#line 9
    await testRunner.GivenAsync("the system have 4 services with the following methods and events", ((string)(null)), table1, "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync("I call \"HandleRequest\" method of \"FrontEnd\" service to get list of products", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Order",
                            "ProviderName",
                            "EventName",
                            "Tags",
                            "Parent"});
                table2.AddRow(new string[] {
                            "1",
                            "FrontEnd",
                            "RequestReceived",
                            "{\"path\":\"/products\"}",
                            ""});
                table2.AddRow(new string[] {
                            "2",
                            "FrontEnd",
                            "GetProducts",
                            "{\"path\":\"/products\"}",
                            ""});
                table2.AddRow(new string[] {
                            "3",
                            "BackEnd",
                            "GetProducts",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "4",
                            "BackEnd",
                            "BeginGetProductsFromCache",
                            "{\"cache_key\": \"/products\"}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "5",
                            "BackEnd",
                            "FinishedGetProductsFromCache",
                            "{\"cache_key\": \"/products\", \"found\": false}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "6",
                            "BackEnd",
                            "BeginGetProductsFromDatabase",
                            "{\"query\": \"SELECT * FROM products\"}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "7",
                            "Database",
                            "BeginQuery",
                            "{\"query\": \"SELECT * FROM products\"}",
                            "Database.Query"});
                table2.AddRow(new string[] {
                            "8",
                            "Database",
                            "FinishedQuery",
                            "{\"count\": 15}",
                            "Database.Query"});
                table2.AddRow(new string[] {
                            "9",
                            "BackEnd",
                            "FinishedGetProductsFromDatabase",
                            "{\"count\": 15}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "10",
                            "BackEnd",
                            "UpdateCache",
                            "{\"cache_key\": \"/products\"}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "11",
                            "BackEnd",
                            "FinishedGetProducts",
                            "{\"count\": 15}",
                            "BackEnd.GetProducts"});
                table2.AddRow(new string[] {
                            "12",
                            "FrontEnd",
                            "RequestCompleted",
                            "{\"path\":\"/products\", \"count\": 15, \"status_code\": \"OK\"}",
                            ""});
#line 23
    await testRunner.ThenAsync("the system should have collected the following events before timeout of 10 second" +
                        "s", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ETWFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ETWFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
