// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Monitoring.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TracesTestFeature : object, Xunit.IClassFixture<TracesTestFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Traces.feature"
#line hidden
        
        public TracesTestFeature(TracesTestFeature.FixtureData fixtureData, Common_Monitoring_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TracesTest", "As a developer,\r\nI want to be able to correlate calls wihin a service, as well as" +
                    " across services,\r\nSo that I can monitor and troubleshoot the system.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trace sync parent and child calls")]
        [Xunit.TraitAttribute("FeatureTitle", "TracesTest")]
        [Xunit.TraitAttribute("Description", "Trace sync parent and child calls")]
        [Xunit.TraitAttribute("Category", "trace")]
        [Xunit.TraitAttribute("Category", "prod")]
        public void TraceSyncParentAndChildCalls()
        {
            string[] tagsOfScenario = new string[] {
                    "trace",
                    "prod"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace sync parent and child calls", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.Given("a number 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.When("I calculate fibonacci of the number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("the result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "OperationName",
                            "ParentOperationName",
                            "Attributes"});
                table7.AddRow(new string[] {
                            "GivenANumber",
                            "",
                            "input.number: 4"});
                table7.AddRow(new string[] {
                            "Fibonacci",
                            "",
                            "input.n: 0, result: 0"});
                table7.AddRow(new string[] {
                            "Fibonacci",
                            "",
                            "input.n: 1, result: 1"});
                table7.AddRow(new string[] {
                            "Fibonacci",
                            "Fibonacci",
                            "input.n: 2, result 1"});
                table7.AddRow(new string[] {
                            "Fibonacci",
                            "Fibonacci",
                            "input.n: 3, result 2"});
                table7.AddRow(new string[] {
                            "Fibonacci",
                            "WhenICalculateFibonacciOfTheNumber",
                            "input.n: 4, result 3"});
                table7.AddRow(new string[] {
                            "WhenICalculateFibonacciOfTheNumber",
                            "",
                            "result: 3"});
                table7.AddRow(new string[] {
                            "ThenTheResultShouldBe",
                            "",
                            "expected: 3, actual: 3"});
#line 12
    testRunner.And("I should have the following traces", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TracesTestFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TracesTestFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
