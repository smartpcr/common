// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Kusto.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EtwIngestFeature : object, Xunit.IClassFixture<EtwIngestFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EtwIngest.feature"
#line hidden
        
        public EtwIngestFeature(EtwIngestFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EtwIngest", "\tAs a user,\r\n  I want to be able to extract ETW events from a file,\r\n  and infer " +
                    "its kusto table schema based on provider and event,\r\n  and ingest the events int" +
                    "o the kusto table.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="extract etl file")]
        [Xunit.TraitAttribute("FeatureTitle", "EtwIngest")]
        [Xunit.TraitAttribute("Description", "extract etl file")]
        [Xunit.TraitAttribute("Category", "etw")]
        public async System.Threading.Tasks.Task ExtractEtlFile()
        {
            string[] tagsOfScenario = new string[] {
                    "etw"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("extract etl file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
 await testRunner.GivenAsync("etl file \"E:\\\\kustodata\\\\SAC14-S1-N01_Microsoft-AzureStack-Compute-HostPluginWatc" +
                        "hDog.2024-09-23.1.etl\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.WhenAsync("I parse etl file", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "ProviderName",
                            "EventName"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "ConfigFileFound"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "EnsureProcessStarted/Start"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "EnsureProcessStarted/Stop"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "FoundProcessAlreadyRunning"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "ProcessStarted"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "ReadConfigFromStore"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "StartWatchDog/Start"});
                table1.AddRow(new string[] {
                            "Microsoft-AzureStack-Compute-HostPluginWatchDog",
                            "StartWatchDog/Stop"});
#line 11
 await testRunner.ThenAsync("the result have the following events", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await EtwIngestFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await EtwIngestFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
