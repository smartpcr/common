// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rule.Expressions.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class OperatorEvaluationFeature : object, Xunit.IClassFixture<OperatorEvaluationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Operators.feature"
#line hidden
        
        public OperatorEvaluationFeature(OperatorEvaluationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Operator Evaluation", "  In order to evaluate rules\r\n  As a developer\r\n  I want to be able to compile ru" +
                    "le expression against a strongly typed object", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with equal filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with equal filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithEqualFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with equal filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table1.AddRow(new string[] {
                            "City",
                            "Equals",
                            "Redmond"});
#line 9
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table1, "When ");
#line hidden
#line 12
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with number filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with number filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithNumberFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with number filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table2.AddRow(new string[] {
                            "Population",
                            "GreaterThan",
                            "100000"});
#line 16
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table2, "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with number filter returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with number filter returns false")]
        public async System.Threading.Tasks.Task VerifyContextWithNumberFilterReturnsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with number filter returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table3.AddRow(new string[] {
                            "AvgIncome",
                            "LessOrEqual",
                            "100000"});
#line 23
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table3, "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with in filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with in filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithInFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with in filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table4.AddRow(new string[] {
                            "State",
                            "In",
                            "CA,AZ,WA"});
#line 30
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table4, "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with in filter trim white spaces returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with in filter trim white spaces returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithInFilterTrimWhiteSpacesReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with in filter trim white spaces returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table5.AddRow(new string[] {
                            "State",
                            "In",
                            "CA, AZ, WA, , DC"});
#line 37
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table5, "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with in filter returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with in filter returns false")]
        public async System.Threading.Tasks.Task VerifyContextWithInFilterReturnsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with in filter returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table6.AddRow(new string[] {
                            "State",
                            "In",
                            "CA, AZ"});
#line 44
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table6, "When ");
#line hidden
#line 47
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with allin filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with allin filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithAllinFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with allin filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table7.AddRow(new string[] {
                            "Hobbies",
                            "AllIn",
                            "Golf, Tweeter"});
#line 51
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table7, "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with null field filter returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with null field filter returns false")]
        public async System.Threading.Tasks.Task VerifyContextWithNullFieldFilterReturnsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with null field filter returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table8.AddRow(new string[] {
                            "Street",
                            "Contains",
                            "Main"});
#line 58
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table8, "When ");
#line hidden
#line 61
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with contains filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with contains filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithContainsFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with contains filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 64
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table9.AddRow(new string[] {
                            "City",
                            "Contains",
                            "mond"});
#line 65
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table9, "When ");
#line hidden
#line 68
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with startswith filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with startswith filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithStartswithFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with startswith filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 71
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Operator",
                            "Value"});
                table10.AddRow(new string[] {
                            "City",
                            "Contains",
                            "Red"});
#line 72
    await testRunner.WhenAsync("I evaluate the rule expression", ((string)(null)), table10, "When ");
#line hidden
#line 75
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with composite filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with composite filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithCompositeFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with composite filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 78
    await testRunner.GivenAsync("a context of type \"Location\" from json file \"redmond.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""not"": {
        ""left"": ""Country"",
        ""operator"": ""equals"",
        ""right"": ""Canada""
      }
    },
    {
      ""left"": ""City"",
      ""operator"": ""equals"",
      ""right"": ""Redmond""
    },
    {
      ""left"": ""State"",
      ""operator"": ""equals"",
      ""right"": ""WA""
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with nested filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with nested filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithNestedFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with nested filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 106
    await testRunner.GivenAsync("an array of type \"Person\" from json file \"big_family.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 107
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""left"": ""LastName"",
      ""operator"": ""Equals"",
      ""right"": ""Smith""
    },
    {
      ""not"": {
        ""anyOf"": [
          {
            ""allOf"": [
              {
                ""left"": ""FirstName"",
                ""operator"": ""In"",
                ""right"": ""Mary""
              },
              {
                ""left"": ""LastName"",
                ""operator"": ""Equals"",
                ""right"": ""Smith""
              }
            ]
          },
          {
            ""allOf"": [
              {
                ""left"": ""FirstName"",
                ""operator"": ""Equals"",
                ""right"": ""Patricia""
              },
              {
                ""left"": ""LastName"",
                ""operator"": ""Equals"",
                ""right"": ""Smith""
              }
            ]
          },
          {
            ""anyOf"": [
              {
                ""left"": ""FirstName"",
                ""operator"": ""Equals"",
                ""right"": ""Linda""
              },
              {
                ""left"": ""FirstName"",
                ""operator"": ""Equals"",
                ""right"": ""Jennifer""
              },
              {
                ""left"": ""FirstName"",
                ""operator"": ""Equals"",
                ""right"": ""Margaret""
              }
            ]
          }
        ]
      }
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "FirstName"});
                table11.AddRow(new string[] {
                            "James"});
                table11.AddRow(new string[] {
                            "John"});
                table11.AddRow(new string[] {
                            "Robert"});
                table11.AddRow(new string[] {
                            "William"});
                table11.AddRow(new string[] {
                            "David"});
#line 172
    await testRunner.ThenAsync("collection evaluation result should be", ((string)(null)), table11, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with nested properties returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with nested properties returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithNestedPropertiesReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with nested properties returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 181
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 182
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""left"": ""FirstName"",
      ""operator"": ""Equals"",
      ""right"": ""Donald""
    },
    {
      ""left"": ""LastName"",
      ""operator"": ""Equals"",
      ""right"": ""Trump""
    },
    {
      ""left"": ""Spouse.FirstName"",
      ""operator"": ""Equals"",
      ""right"": ""Melania""
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 204
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with array contains filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with array contains filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithArrayContainsFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with array contains filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 207
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 208
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""left"": ""FirstName"",
      ""operator"": ""Equals"",
      ""right"": ""Donald""
    },
    {
      ""left"": ""Hobbies"",
      ""operator"": ""Contains"",
      ""right"": ""Golf""
    },
    {
      ""left"": ""Spouse.FirstName"",
      ""operator"": ""NotEquals"",
      ""right"": ""Ivanka""
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 230
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with indexed array filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with indexed array filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithIndexedArrayFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with indexed array filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 232
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 233
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 234
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""left"": ""FirstName"",
      ""operator"": ""Equals"",
      ""right"": ""Donald""
    },
    {
      ""left"": ""Hobbies"",
      ""operator"": ""Contains"",
      ""right"": ""Golf""
    },
    {
      ""left"": ""Spouse.FirstName"",
      ""operator"": ""StartsWith"",
      ""right"": ""Mel""
    },
    {
      ""left"": ""Children[0].FirstName"",
      ""operator"": ""Equals"",
      ""right"": ""Tiffany""
    },
    {
      ""left"": ""Titles[1]"",
      ""operator"": ""NotEquals"",
      ""right"": ""Scientist""
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 266
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with enum field in filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with enum field in filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithEnumFieldInFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with enum field in filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 268
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 269
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 270
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"FirstName\",\r\n      \"operator\": \"Equals\",\r\n" +
                        "      \"right\": \"Donald\"\r\n    },\r\n    {\r\n      \"left\": \"Race\",\r\n      \"operator\":" +
                        " \"In\",\r\n      \"right\": \"Black,White\"\r\n    }\r\n  ]\r\n}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 287
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with date field filter returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with date field filter returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithDateFieldFilterReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with date field filter returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 289
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 290
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 291
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"FirstName\",\r\n      \"operator\": \"Equals\",\r\n" +
                        "      \"right\": \"Donald\"\r\n    },\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"opera" +
                        "tor\": \"LessThan\",\r\n      \"right\": \"2020-04-07T15:47:54.760654-07:00\"\r\n    }\r\n  ]" +
                        "\r\n}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 308
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with expression on each side returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with expression on each side returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithExpressionOnEachSideReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with expression on each side returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 310
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 311
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 312
    await testRunner.WhenAsync("I evaluate context with JSON filter", @"{
  ""allOf"": [
    {
      ""left"": ""Children[0].LastName"",
      ""operator"": ""Equals"",
      ""right"": ""Children[1].LastName"",
      ""rightSideIsExpression"": true
    },
    {
      ""left"": ""Children.Count()"",
      ""operator"": ""Equals"",
      ""right"": ""2""
    }
  ]
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 330
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with match operator returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with match operator returns true")]
        public async System.Threading.Tasks.Task VerifyContextWithMatchOperatorReturnsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with match operator returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 332
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 333
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 334
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"FirstName\",\r\n      \"operator\": \"Matches\",\r" +
                        "\n      \"right\": \"^do[\\\\w]+d$\"\r\n    }\r\n  ]\r\n}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 346
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify context with match operator returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Operator Evaluation")]
        [Xunit.TraitAttribute("Description", "Verify context with match operator returns false")]
        public async System.Threading.Tasks.Task VerifyContextWithMatchOperatorReturnsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Verify context with match operator returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 348
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 349
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 350
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"LastName\",\r\n      \"operator\": \"Matches\",\r\n" +
                        "      \"right\": \"^DO[\\\\w]+d$\"\r\n    }\r\n  ]\r\n}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 362
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await OperatorEvaluationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await OperatorEvaluationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
