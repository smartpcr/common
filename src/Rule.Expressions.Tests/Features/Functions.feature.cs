// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rule.Expressions.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class FunctionEvaluationFeature : object, Xunit.IClassFixture<FunctionEvaluationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Function Evaluation", "In order to use function in rule expression\r\nAs a developer\r\nI want to be able to" +
                " invoke built-in functions against a strongly typed object", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Functions.feature"
#line hidden
        
        public FunctionEvaluationFeature(FunctionEvaluationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check enum field is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check enum field is null")]
        public async System.Threading.Tasks.Task CheckEnumFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check enum field is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Gender\",\r\n      \"operator\": \"IsNull\"\r\n    " +
                        "}\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check enum field is not null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check enum field is not null")]
        public async System.Threading.Tasks.Task CheckEnumFieldIsNotNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check enum field is not null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Gender\",\r\n      \"operator\": \"NotIsNull\",\r\n" +
                        "    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check date field is not null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check date field is not null")]
        public async System.Threading.Tasks.Task CheckDateFieldIsNotNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check date field is not null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"NotIsNull\"" +
                        "\r\n    },\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"GreaterThan\",\r\n " +
                        "     \"right\": \"11/22/1943 10:52:28 PM\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check date field is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check date field is null")]
        public async System.Threading.Tasks.Task CheckDateFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check date field is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Spouse.BirthDate\",\r\n      \"operator\": \"Not" +
                        "IsNull\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
    await testRunner.ThenAsync("evaluation result should be \"false\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of object array")]
        public async System.Threading.Tasks.Task GetCountOfObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get count of object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 73
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 74
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Count()\",\r\n      \"operator\": \"Equ" +
                        "als\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of string array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of string array")]
        public async System.Threading.Tasks.Task GetCountOfStringArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get count of string array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 89
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 90
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Titles.Count()\",\r\n      \"operator\": \"Equal" +
                        "s\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 102
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of string list")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of string list")]
        public async System.Threading.Tasks.Task GetCountOfStringList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get count of string list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 105
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 106
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.Count()\",\r\n      \"operator\": \"Equa" +
                        "ls\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 118
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get distinct count of string list")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get distinct count of string list")]
        public async System.Threading.Tasks.Task GetDistinctCountOfStringList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get distinct count of string list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 121
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 122
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Titles.DistinctCount()\",\r\n      \"operator\"" +
                        ": \"Equals\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 134
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select from object array")]
        public async System.Threading.Tasks.Task SelectFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 137
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 138
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(FirstName)\",\r\n      \"opera" +
                        "tor\": \"AllIn\",\r\n      \"right\": \"Tiffany, Barron\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 150
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select many from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select many from object array")]
        public async System.Threading.Tasks.Task SelectManyFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select many from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 153
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 154
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.SelectMany(Hobbies)\",\r\n      \"ope" +
                        "rator\": \"AllIn\",\r\n      \"right\": \"Arts, Music, Dancing, Soccer\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 166
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="summarize from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "summarize from object array")]
        public async System.Threading.Tasks.Task SummarizeFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("summarize from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 169
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 170
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Sum()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"40\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 182
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="summarize field from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "summarize field from object array")]
        public async System.Threading.Tasks.Task SummarizeFieldFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("summarize field from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 185
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 186
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Sum(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"40\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 198
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get average from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get average from array")]
        public async System.Threading.Tasks.Task GetAverageFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get average from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 201
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 202
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Average()\",\r\n      \"o" +
                        "perator\": \"Equals\",\r\n      \"right\": \"20\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 214
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get average with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get average with arg from object array")]
        public async System.Threading.Tasks.Task GetAverageWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get average with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 217
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 218
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Average(Age)\",\r\n      \"operator\":" +
                        " \"Equals\",\r\n      \"right\": \"20\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 230
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get max from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get max from array")]
        public async System.Threading.Tasks.Task GetMaxFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get max from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 232
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 233
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 234
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Max()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"26\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 246
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get max with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get max with arg from object array")]
        public async System.Threading.Tasks.Task GetMaxWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get max with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 249
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 250
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Max(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"26\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 262
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get min from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get min from array")]
        public async System.Threading.Tasks.Task GetMinFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get min from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 264
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 265
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 266
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Min()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 278
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get min with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get min with arg from object array")]
        public async System.Threading.Tasks.Task GetMinWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("get min with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 280
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 281
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 282
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Min(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 294
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="use expression on both sides")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "use expression on both sides")]
        public async System.Threading.Tasks.Task UseExpressionOnBothSides()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("use expression on both sides", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 297
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 298
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Sum()\",\r\n      \"opera" +
                        "tor\": \"LessThan\",\r\n      \"right\": \"Age\",\r\n      \"rightSideIsExpression\": true\r\n " +
                        "   }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 311
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select nested field")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select nested field")]
        public async System.Threading.Tasks.Task SelectNestedField()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select nested field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 313
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 314
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 315
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(FirstName)\",\r\n      \"opera" +
                        "tor\": \"AllIn\",\r\n      \"right\": \"Tiffany,Barron\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 327
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select nested field with function")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select nested field with function")]
        public async System.Threading.Tasks.Task SelectNestedFieldWithFunction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("select nested field with function", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 329
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 330
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 331
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Hobbies.OrderByDesc().Firs" +
                        "t())\",\r\n      \"operator\": \"AllIn\",\r\n      \"right\": \"Music,Soccer\"\r\n    }\r\n  ]\r\n}" +
                        "", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 343
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function ago")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function ago")]
        public async System.Threading.Tasks.Task InvokeFunctionAgo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function ago", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 345
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 346
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 347
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"GreaterTha" +
                        "n\",\r\n      \"right\": \"Ago(50000d)\",\r\n      \"rightSideIsExpression\": true\r\n    }\r\n" +
                        "  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 360
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function where")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function where")]
        public async System.Threading.Tasks.Task InvokeFunctionWhere()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function where", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 362
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 363
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 364
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(FirstName, Equals, Tiffany)" +
                        ".Count()\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"1\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 376
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function where with contains")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function where with contains")]
        public async System.Threading.Tasks.Task InvokeFunctionWhereWithContains()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function where with contains", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 378
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 379
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 380
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(LastName, contains, \'ump\')." +
                        "Select(FirstName)\",\r\n      \"operator\": \"AllIn\",\r\n      \"right\": \"Tiffany,Barron\"" +
                        "\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 392
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function first with arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function first with arg")]
        public async System.Threading.Tasks.Task InvokeFunctionFirstWithArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function first with arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 394
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 395
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 396
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.First(FirstName, Equals, Tiffany)" +
                        ".Age\",\r\n      \"operator\": \"GreaterThan\",\r\n      \"right\": \"25\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 408
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function first without arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function first without arg")]
        public async System.Threading.Tasks.Task InvokeFunctionFirstWithoutArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function first without arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 410
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 411
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 412
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.First()\",\r\n      \"operator\": \"Equa" +
                        "ls\",\r\n      \"right\": \"Golf\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 424
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function last with arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function last with arg")]
        public async System.Threading.Tasks.Task InvokeFunctionLastWithArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function last with arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 426
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 427
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 428
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Last(FirstName, Equals, Tiffany)." +
                        "Age\",\r\n      \"operator\": \"GreaterThan\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 440
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function last without arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function last without arg")]
        public async System.Threading.Tasks.Task InvokeFunctionLastWithoutArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function last without arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 442
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 443
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 444
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.Last()\",\r\n      \"operator\": \"In\",\r" +
                        "\n      \"right\": \"Golf,Tweeter\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 456
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function order by")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function order by")]
        public async System.Threading.Tasks.Task InvokeFunctionOrderBy()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function order by", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 458
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 459
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 460
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.OrderBy(FirstName).First().FirstN" +
                        "ame\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"Barron\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 472
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function order by desc")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function order by desc")]
        public async System.Threading.Tasks.Task InvokeFunctionOrderByDesc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke function order by desc", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 474
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 475
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 476
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.OrderByDesc(FirstName).First().Fi" +
                        "rstName\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"Tiffany\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 488
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke macro")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke macro")]
        public async System.Threading.Tasks.Task InvokeMacro()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke macro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 490
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 491
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 492
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"IsPresident()\",\r\n      \"operator\": \"Equals" +
                        "\",\r\n      \"right\": \"true\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 504
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke macro with args")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke macro with args")]
        public async System.Threading.Tasks.Task InvokeMacroWithArgs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke macro with args", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 506
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 507
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 508
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"IsAdult(18)\",\r\n      \"operator\": \"Equals\"," +
                        "\r\n      \"right\": \"true\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 520
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke sum on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke sum on empty collection")]
        public async System.Threading.Tasks.Task InvokeSumOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke sum on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 522
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 523
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 524
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(Age,lessThan,0).Select(Age)" +
                        ".Sum()\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 536
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke max on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke max on empty collection")]
        public async System.Threading.Tasks.Task InvokeMaxOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke max on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 538
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 539
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 540
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(FirstName,equals,helloworld" +
                        ").Max(Age)\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 552
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke count on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke count on empty collection")]
        public async System.Threading.Tasks.Task InvokeCountOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("invoke count on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 554
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 555
    await testRunner.GivenAsync("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 556
    await testRunner.WhenAsync("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(Age,lessThan,0).Count()\",\r\n" +
                        "      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 568
    await testRunner.ThenAsync("evaluation result should be \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await FunctionEvaluationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await FunctionEvaluationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
