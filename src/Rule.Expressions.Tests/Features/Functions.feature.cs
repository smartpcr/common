// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rule.Expressions.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class FunctionEvaluationFeature : object, Xunit.IClassFixture<FunctionEvaluationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Functions.feature"
#line hidden
        
        public FunctionEvaluationFeature(FunctionEvaluationFeature.FixtureData fixtureData, Rule_Expressions_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Function Evaluation", "In order to use function in rule expression\r\nAs a developer\r\nI want to be able to" +
                    " invoke built-in functions against a strongly typed object", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check enum field is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check enum field is null")]
        public void CheckEnumFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check enum field is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Gender\",\r\n      \"operator\": \"IsNull\"\r\n    " +
                        "}\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check enum field is not null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check enum field is not null")]
        public void CheckEnumFieldIsNotNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check enum field is not null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Gender\",\r\n      \"operator\": \"NotIsNull\",\r\n" +
                        "    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.Then("evaluation result should be \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check date field is not null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check date field is not null")]
        public void CheckDateFieldIsNotNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check date field is not null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"NotIsNull\"" +
                        "\r\n    },\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"GreaterThan\",\r\n " +
                        "     \"right\": \"11/22/1943 10:52:28 PM\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check date field is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "Check date field is null")]
        public void CheckDateFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check date field is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Spouse.BirthDate\",\r\n      \"operator\": \"Not" +
                        "IsNull\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
    testRunner.Then("evaluation result should be \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of object array")]
        public void GetCountOfObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get count of object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Count()\",\r\n      \"operator\": \"Equ" +
                        "als\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of string array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of string array")]
        public void GetCountOfStringArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get count of string array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Titles.Count()\",\r\n      \"operator\": \"Equal" +
                        "s\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get count of string list")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get count of string list")]
        public void GetCountOfStringList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get count of string list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.Count()\",\r\n      \"operator\": \"Equa" +
                        "ls\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get distinct count of string list")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get distinct count of string list")]
        public void GetDistinctCountOfStringList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get distinct count of string list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Titles.DistinctCount()\",\r\n      \"operator\"" +
                        ": \"Equals\",\r\n      \"right\": \"2\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select from object array")]
        public void SelectFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("select from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 137
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(FirstName)\",\r\n      \"opera" +
                        "tor\": \"AllIn\",\r\n      \"right\": \"Tiffany, Barron\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select many from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select many from object array")]
        public void SelectManyFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("select many from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 153
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.SelectMany(Hobbies)\",\r\n      \"ope" +
                        "rator\": \"AllIn\",\r\n      \"right\": \"Arts, Music, Dancing, Soccer\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="summarize from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "summarize from object array")]
        public void SummarizeFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("summarize from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 169
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 170
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Sum()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"40\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="summarize field from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "summarize field from object array")]
        public void SummarizeFieldFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("summarize field from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 185
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Sum(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"40\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get average from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get average from array")]
        public void GetAverageFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get average from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 201
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Average()\",\r\n      \"o" +
                        "perator\": \"Equals\",\r\n      \"right\": \"20\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get average with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get average with arg from object array")]
        public void GetAverageWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get average with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 217
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 218
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Average(Age)\",\r\n      \"operator\":" +
                        " \"Equals\",\r\n      \"right\": \"20\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 230
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get max from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get max from array")]
        public void GetMaxFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get max from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 232
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 233
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 234
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Max()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"26\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 246
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get max with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get max with arg from object array")]
        public void GetMaxWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get max with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 249
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 250
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Max(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"26\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 262
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get min from array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get min from array")]
        public void GetMinFromArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get min from array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 264
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 265
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 266
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Min()\",\r\n      \"opera" +
                        "tor\": \"Equals\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="get min with arg from object array")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "get min with arg from object array")]
        public void GetMinWithArgFromObjectArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get min with arg from object array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 280
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 281
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 282
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Min(Age)\",\r\n      \"operator\": \"Eq" +
                        "uals\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 294
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="use expression on both sides")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "use expression on both sides")]
        public void UseExpressionOnBothSides()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("use expression on both sides", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 297
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 298
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Age).Sum()\",\r\n      \"opera" +
                        "tor\": \"LessThan\",\r\n      \"right\": \"Age\",\r\n      \"rightSideIsExpression\": true\r\n " +
                        "   }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select nested field")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select nested field")]
        public void SelectNestedField()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("select nested field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 313
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 314
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 315
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(FirstName)\",\r\n      \"opera" +
                        "tor\": \"AllIn\",\r\n      \"right\": \"Tiffany,Barron\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 327
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="select nested field with function")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "select nested field with function")]
        public void SelectNestedFieldWithFunction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("select nested field with function", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 329
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 330
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 331
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Select(Hobbies.OrderByDesc().Firs" +
                        "t())\",\r\n      \"operator\": \"AllIn\",\r\n      \"right\": \"Music,Soccer\"\r\n    }\r\n  ]\r\n}" +
                        "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function ago")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function ago")]
        public void InvokeFunctionAgo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function ago", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 345
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 346
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 347
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"BirthDate\",\r\n      \"operator\": \"GreaterTha" +
                        "n\",\r\n      \"right\": \"Ago(50000d)\",\r\n      \"rightSideIsExpression\": true\r\n    }\r\n" +
                        "  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 360
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function where")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function where")]
        public void InvokeFunctionWhere()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function where", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 362
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 363
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 364
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(FirstName, Equals, Tiffany)" +
                        ".Count()\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"1\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 376
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function where with contains")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function where with contains")]
        public void InvokeFunctionWhereWithContains()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function where with contains", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 378
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 379
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 380
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(LastName, contains, \'ump\')." +
                        "Select(FirstName)\",\r\n      \"operator\": \"AllIn\",\r\n      \"right\": \"Tiffany,Barron\"" +
                        "\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 392
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function first with arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function first with arg")]
        public void InvokeFunctionFirstWithArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function first with arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 394
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 395
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 396
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.First(FirstName, Equals, Tiffany)" +
                        ".Age\",\r\n      \"operator\": \"GreaterThan\",\r\n      \"right\": \"25\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 408
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function first without arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function first without arg")]
        public void InvokeFunctionFirstWithoutArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function first without arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 410
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 411
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 412
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.First()\",\r\n      \"operator\": \"Equa" +
                        "ls\",\r\n      \"right\": \"Golf\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 424
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function last with arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function last with arg")]
        public void InvokeFunctionLastWithArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function last with arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 426
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 427
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 428
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Last(FirstName, Equals, Tiffany)." +
                        "Age\",\r\n      \"operator\": \"GreaterThan\",\r\n      \"right\": \"14\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 440
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function last without arg")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function last without arg")]
        public void InvokeFunctionLastWithoutArg()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function last without arg", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 442
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 443
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 444
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Hobbies.Last()\",\r\n      \"operator\": \"In\",\r" +
                        "\n      \"right\": \"Golf,Tweeter\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 456
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function order by")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function order by")]
        public void InvokeFunctionOrderBy()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function order by", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 458
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 459
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 460
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.OrderBy(FirstName).First().FirstN" +
                        "ame\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"Barron\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 472
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke function order by desc")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke function order by desc")]
        public void InvokeFunctionOrderByDesc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke function order by desc", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 474
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 475
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 476
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.OrderByDesc(FirstName).First().Fi" +
                        "rstName\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"Tiffany\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 488
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke macro")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke macro")]
        public void InvokeMacro()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke macro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 490
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 491
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 492
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"IsPresident()\",\r\n      \"operator\": \"Equals" +
                        "\",\r\n      \"right\": \"true\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 504
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke macro with args")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke macro with args")]
        public void InvokeMacroWithArgs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke macro with args", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 506
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 507
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 508
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"IsAdult(18)\",\r\n      \"operator\": \"Equals\"," +
                        "\r\n      \"right\": \"true\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 520
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke sum on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke sum on empty collection")]
        public void InvokeSumOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke sum on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 522
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 523
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 524
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(Age,lessThan,0).Select(Age)" +
                        ".Sum()\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 536
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke max on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke max on empty collection")]
        public void InvokeMaxOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke max on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 538
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 539
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 540
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(FirstName,equals,helloworld" +
                        ").Max(Age)\",\r\n      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 552
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="invoke count on empty collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Function Evaluation")]
        [Xunit.TraitAttribute("Description", "invoke count on empty collection")]
        public void InvokeCountOnEmptyCollection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invoke count on empty collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 554
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 555
    testRunner.Given("a context of type \"Person\" from json file \"donald_trump.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 556
    testRunner.When("I evaluate context with JSON filter", "{\r\n  \"allOf\": [\r\n    {\r\n      \"left\": \"Children.Where(Age,lessThan,0).Count()\",\r\n" +
                        "      \"operator\": \"Equals\",\r\n      \"right\": \"0\"\r\n    }\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 568
    testRunner.Then("evaluation result should be \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FunctionEvaluationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FunctionEvaluationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
