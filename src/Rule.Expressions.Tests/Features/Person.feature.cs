// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rule.Expressions.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class RuleEvaluatorFeature : object, Xunit.IClassFixture<RuleEvaluatorFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RuleEvaluator", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Person.feature"
#line hidden
        
        public RuleEvaluatorFeature(RuleEvaluatorFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate simple property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate simple property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public async System.Threading.Tasks.Task CanEvaluateSimplePropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("can evaluate simple property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table12.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 7
    await testRunner.GivenAsync("a person", ((string)(null)), table12, "Given ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table13.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 10
    await testRunner.AndAsync("his wife", ((string)(null)), table13, "And ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table14.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table14.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 13
    await testRunner.AndAsync("their children", ((string)(null)), table14, "And ");
#line hidden
#line 17
    await testRunner.WhenAsync("evaluate int value with following property path \"Age\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.ThenAsync("the result should be 36", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table15.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 19
    await testRunner.AndAsync("person should be", ((string)(null)), table15, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate compound property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate compound property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public async System.Threading.Tasks.Task CanEvaluateCompoundPropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("can evaluate compound property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table16.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 26
    await testRunner.GivenAsync("a person", ((string)(null)), table16, "Given ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table17.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 29
    await testRunner.AndAsync("his wife", ((string)(null)), table17, "And ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table18.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table18.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 32
    await testRunner.AndAsync("their children", ((string)(null)), table18, "And ");
#line hidden
#line 36
    await testRunner.WhenAsync("evaluate int value with following property path \"Spouse.Age\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the result should be 30", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate array index property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate array index property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public async System.Threading.Tasks.Task CanEvaluateArrayIndexPropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("can evaluate array index property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table19.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 42
    await testRunner.GivenAsync("a person", ((string)(null)), table19, "Given ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table20.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 45
    await testRunner.AndAsync("his wife", ((string)(null)), table20, "And ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table21.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table21.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 48
    await testRunner.AndAsync("their children", ((string)(null)), table21, "And ");
#line hidden
#line 52
    await testRunner.WhenAsync("evaluate int value with following property path \"Children[0].Age\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
    await testRunner.ThenAsync("the result should be 18", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RuleEvaluatorFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RuleEvaluatorFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
