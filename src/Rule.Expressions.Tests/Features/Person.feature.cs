// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rule.Expressions.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class RuleEvaluatorFeature : object, Xunit.IClassFixture<RuleEvaluatorFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Person.feature"
#line hidden
        
        public RuleEvaluatorFeature(RuleEvaluatorFeature.FixtureData fixtureData, Rule_Expressions_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RuleEvaluator", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate simple property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate simple property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public void CanEvaluateSimplePropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("can evaluate simple property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table12.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 7
    testRunner.Given("a person", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table13.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 10
    testRunner.And("his wife", ((string)(null)), table13, "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table14.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table14.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 13
    testRunner.And("their children", ((string)(null)), table14, "And ");
#line hidden
#line 17
    testRunner.When("evaluate int value with following property path \"Age\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then("the result should be 36", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table15.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 19
    testRunner.And("person should be", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate compound property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate compound property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public void CanEvaluateCompoundPropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("can evaluate compound property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table16.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 26
    testRunner.Given("a person", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table17.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 29
    testRunner.And("his wife", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table18.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table18.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 32
    testRunner.And("their children", ((string)(null)), table18, "And ");
#line hidden
#line 36
    testRunner.When("evaluate int value with following property path \"Spouse.Age\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
    testRunner.Then("the result should be 30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="can evaluate array index property path")]
        [Xunit.TraitAttribute("FeatureTitle", "RuleEvaluator")]
        [Xunit.TraitAttribute("Description", "can evaluate array index property path")]
        [Xunit.TraitAttribute("Category", "rule")]
        [Xunit.TraitAttribute("Category", "person")]
        public void CanEvaluateArrayIndexPropertyPath()
        {
            string[] tagsOfScenario = new string[] {
                    "rule",
                    "person"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("can evaluate array index property path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table19.AddRow(new string[] {
                            "John",
                            "Doe",
                            "36"});
#line 42
    testRunner.Given("a person", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table20.AddRow(new string[] {
                            "Jen",
                            "Bush",
                            "30"});
#line 45
    testRunner.And("his wife", ((string)(null)), table20, "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table21.AddRow(new string[] {
                            "Julia",
                            "Doe",
                            "18"});
                table21.AddRow(new string[] {
                            "Claire",
                            "Bush",
                            "8"});
#line 48
    testRunner.And("their children", ((string)(null)), table21, "And ");
#line hidden
#line 52
    testRunner.When("evaluate int value with following property path \"Children[0].Age\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then("the result should be 18", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RuleEvaluatorFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RuleEvaluatorFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
