// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Config.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AppsettingsFeature : object, Xunit.IClassFixture<AppsettingsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "appsettings.feature"
#line hidden
        
        public AppsettingsFeature(AppsettingsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "appsettings", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get appsettings in production environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get appsettings in production environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "prod")]
        public async System.Threading.Tasks.Task GetAppsettingsInProductionEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "prod"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get appsettings in production environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await testRunner.GivenAsync("I have a valid \"appsettings.json\" file", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "Logging:LogLevel:Default",
                            "Information"});
#line 7
        await testRunner.ThenAsync("I should get the following values", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get appsettings in Development environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get appsettings in Development environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "over_ride")]
        public async System.Threading.Tasks.Task GetAppsettingsInDevelopmentEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "over_ride"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get appsettings in Development environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
        await testRunner.GivenAsync("I have a valid \"appsettings.Development.json\" file", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "Logging:LogLevel:Default",
                            "Debug"});
#line 15
        await testRunner.ThenAsync("I should get the following values", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get strong typed config setting")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get strong typed config setting")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "default")]
        public async System.Threading.Tasks.Task GetStrongTypedConfigSetting()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "strong_type",
                    "default"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get strong typed config setting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
        await testRunner.GivenAsync("setting file containing \"KeyVaultSettings\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "VaultName",
                            "AuthMode"});
                table3.AddRow(new string[] {
                            "dummy",
                            "Spn"});
#line 23
        await testRunner.ThenAsync("I should get key vault", ((string)(null)), table3, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get strong typed config setting in dev environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get strong typed config setting in dev environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "over_ride")]
        public async System.Threading.Tasks.Task GetStrongTypedConfigSettingInDevEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "strong_type",
                    "over_ride"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get strong typed config setting in dev environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
        await testRunner.GivenAsync("setting file containing \"KeyVaultSettings\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "VaultName",
                            "AuthMode"});
                table4.AddRow(new string[] {
                            "dummy",
                            "Msi"});
#line 31
        await testRunner.ThenAsync("I should get key vault", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="validation successful")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "validation successful")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "prod")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task ValidationSuccessful()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "prod",
                    "strong_type",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("validation successful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
        await testRunner.GivenAsync("setting file containing \"Connection\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
        await testRunner.ThenAsync("I should get connection", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
        await testRunner.AndAsync("I should NOT get any validation errors", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="validation failed in dev environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "validation failed in dev environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task ValidationFailedInDevEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "strong_type",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("validation failed in dev environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
        await testRunner.GivenAsync("setting file containing \"Connection\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
        await testRunner.WhenAsync("I get the appsettings", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
        await testRunner.ThenAsync("I should get connection", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                            "PropertyName",
                            "ErrorMessage"});
                table5.AddRow(new string[] {
                            "Name",
                            "The Name field is required."});
                table5.AddRow(new string[] {
                            "Port",
                            "The field Port must be between 1 and 65535."});
#line 47
        await testRunner.AndAsync("I should get validation errors", ((string)(null)), table5, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AppsettingsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AppsettingsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
