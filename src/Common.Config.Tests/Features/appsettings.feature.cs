// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Config.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AppsettingsFeature : object, Xunit.IClassFixture<AppsettingsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "appsettings.feature"
#line hidden
        
        public AppsettingsFeature(AppsettingsFeature.FixtureData fixtureData, Common_Config_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "appsettings", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get appsettings in production environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get appsettings in production environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "prod")]
        public void GetAppsettingsInProductionEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "prod"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get appsettings in production environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
        testRunner.Given("I have a valid \"appsettings.json\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "Logging:LogLevel:Default",
                            "Information"});
#line 7
        testRunner.Then("I should get the following values", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get appsettings in Development environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get appsettings in Development environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "over_ride")]
        public void GetAppsettingsInDevelopmentEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "over_ride"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get appsettings in Development environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
        testRunner.Given("I have a valid \"appsettings.Development.json\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "Logging:LogLevel:Default",
                            "Debug"});
#line 15
        testRunner.Then("I should get the following values", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get strong typed config setting")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get strong typed config setting")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "default")]
        public void GetStrongTypedConfigSetting()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "strong_type",
                    "default"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get strong typed config setting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
        testRunner.Given("setting file containing \"KeyVaultSettings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "VaultName",
                            "AuthMode"});
                table3.AddRow(new string[] {
                            "dummy",
                            "Spn"});
#line 23
        testRunner.Then("I should get key vault", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get strong typed config setting in dev environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "Get strong typed config setting in dev environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "over_ride")]
        public void GetStrongTypedConfigSettingInDevEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "strong_type",
                    "over_ride"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get strong typed config setting in dev environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
        testRunner.Given("setting file containing \"KeyVaultSettings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "VaultName",
                            "AuthMode"});
                table4.AddRow(new string[] {
                            "dummy",
                            "Msi"});
#line 31
        testRunner.Then("I should get key vault", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="validation successful")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "validation successful")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "prod")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void ValidationSuccessful()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "prod",
                    "strong_type",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("validation successful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
        testRunner.Given("setting file containing \"Connection\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
        testRunner.Then("I should get connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
        testRunner.And("I should NOT get any validation errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="validation failed in dev environment")]
        [Xunit.TraitAttribute("FeatureTitle", "appsettings")]
        [Xunit.TraitAttribute("Description", "validation failed in dev environment")]
        [Xunit.TraitAttribute("Category", "unit_test")]
        [Xunit.TraitAttribute("Category", "dev")]
        [Xunit.TraitAttribute("Category", "strong_type")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void ValidationFailedInDevEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "unit_test",
                    "dev",
                    "strong_type",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("validation failed in dev environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
        testRunner.Given("setting file containing \"Connection\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
        testRunner.When("I get the appsettings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
        testRunner.Then("I should get connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "ErrorMessage"});
                table5.AddRow(new string[] {
                            "Name",
                            "The Name field is required."});
                table5.AddRow(new string[] {
                            "Port",
                            "The field Port must be between 1 and 65535."});
#line 47
        testRunner.And("I should get validation errors", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AppsettingsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AppsettingsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
