// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Storage.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BlockBlobTestsFeature : object, Xunit.IClassFixture<BlockBlobTestsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BlockBlobTests.feature"
#line hidden
        
        public BlockBlobTestsFeature(BlockBlobTestsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BlockBlobTests", "\tvalidate block blob operations", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="create block blob")]
        [Xunit.TraitAttribute("FeatureTitle", "BlockBlobTests")]
        [Xunit.TraitAttribute("Description", "create block blob")]
        [Xunit.TraitAttribute("Category", "blockblob")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "integration_test")]
        public async System.Threading.Tasks.Task CreateBlockBlob()
        {
            string[] tagsOfScenario = new string[] {
                    "blockblob",
                    "create",
                    "integration_test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("create block blob", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync("a new blob with uri \"https://test.blob.core.windows.net/testcontainer/testblob\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
    await testRunner.WhenAsync("I create blob with content \"test content\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
    await testRunner.ThenAsync("I should be able to fetch blob attributes", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
 await testRunner.AndAsync("the block type should be \"BlockBlob\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync("I should be able to download blob", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync("the downloaded content should be \"test content\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("the blob uri should be \"http://127.0.0.1:10000/devstoreaccount1/testcontainer/tes" +
                        "tblob\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="create page blobs")]
        [Xunit.TraitAttribute("FeatureTitle", "BlockBlobTests")]
        [Xunit.TraitAttribute("Description", "create page blobs")]
        [Xunit.TraitAttribute("Category", "pageblob")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "integration_test")]
        public async System.Threading.Tasks.Task CreatePageBlobs()
        {
            string[] tagsOfScenario = new string[] {
                    "pageblob",
                    "create",
                    "integration_test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("create page blobs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "BlobUri",
                            "Size"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/2012R2VHD.vhd",
                            "30G"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/4MPageBlob.vhd",
                            "4M"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/folder1/folder2/4MPageBlobWi" +
                                "thFolderPath.vhd",
                            "4M"});
#line 16
     await testRunner.GivenAsync("the following page blobs and their size", ((string)(null)), table1, "Given ");
#line hidden
#line 21
       await testRunner.WhenAsync("I ensure page blobs are created", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
       await testRunner.ThenAsync("I should be able to fetch attributes of page blobs", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "ContainerName",
                            "BlobName",
                            "Size",
                            "BlobType"});
                table2.AddRow(new string[] {
                            "vhds",
                            "2012R2VHD.vhd",
                            "32212254720",
                            "PageBlob"});
                table2.AddRow(new string[] {
                            "vhds",
                            "4MPageBlob.vhd",
                            "4194304",
                            "PageBlob"});
                table2.AddRow(new string[] {
                            "vhds",
                            "folder1/folder2/4MPageBlobWithFolderPath.vhd",
                            "4194304",
                            "PageBlob"});
#line 23
       await testRunner.AndAsync("page blobs should have the following properties", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await BlockBlobTestsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await BlockBlobTestsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
