// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Storage.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BlockBlobTestsFeature : object, Xunit.IClassFixture<BlockBlobTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BlockBlobTests.feature"
#line hidden
        
        public BlockBlobTestsFeature(BlockBlobTestsFeature.FixtureData fixtureData, Common_Storage_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BlockBlobTests", "\tvalidate block blob operations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="create block blob")]
        [Xunit.TraitAttribute("FeatureTitle", "BlockBlobTests")]
        [Xunit.TraitAttribute("Description", "create block blob")]
        [Xunit.TraitAttribute("Category", "blockblob")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "integration_test")]
        public void CreateBlockBlob()
        {
            string[] tagsOfScenario = new string[] {
                    "blockblob",
                    "create",
                    "integration_test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create block blob", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("a new blob with uri \"https://test.blob.core.windows.net/testcontainer/testblob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.When("I create blob with content \"test content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
    testRunner.Then("I should be able to fetch blob attributes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.And("the block type should be \"BlockBlob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("I should be able to download blob", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("the downloaded content should be \"test content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("the blob uri should be \"http://127.0.0.1:10000/devstoreaccount1/testcontainer/tes" +
                        "tblob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="create page blobs")]
        [Xunit.TraitAttribute("FeatureTitle", "BlockBlobTests")]
        [Xunit.TraitAttribute("Description", "create page blobs")]
        [Xunit.TraitAttribute("Category", "pageblob")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "integration_test")]
        public void CreatePageBlobs()
        {
            string[] tagsOfScenario = new string[] {
                    "pageblob",
                    "create",
                    "integration_test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create page blobs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "BlobUri",
                            "Size"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/2012R2VHD.vhd",
                            "30G"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/4MPageBlob.vhd",
                            "4M"});
                table1.AddRow(new string[] {
                            "https://crptestcollateral.blob.core.windows.net/vhds/folder1/folder2/4MPageBlobWi" +
                                "thFolderPath.vhd",
                            "4M"});
#line 16
     testRunner.Given("the following page blobs and their size", ((string)(null)), table1, "Given ");
#line hidden
#line 21
       testRunner.When("I ensure page blobs are created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
       testRunner.Then("I should be able to fetch attributes of page blobs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContainerName",
                            "BlobName",
                            "Size",
                            "BlobType"});
                table2.AddRow(new string[] {
                            "vhds",
                            "2012R2VHD.vhd",
                            "32212254720",
                            "PageBlob"});
                table2.AddRow(new string[] {
                            "vhds",
                            "4MPageBlob.vhd",
                            "4194304",
                            "PageBlob"});
                table2.AddRow(new string[] {
                            "vhds",
                            "folder1/folder2/4MPageBlobWithFolderPath.vhd",
                            "4194304",
                            "PageBlob"});
#line 23
       testRunner.And("page blobs should have the following properties", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BlockBlobTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BlockBlobTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
