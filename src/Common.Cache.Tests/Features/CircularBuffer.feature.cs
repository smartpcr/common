// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Cache.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class CircularBufferFeature : object, Xunit.IClassFixture<CircularBufferFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CircularBuffer.feature"
#line hidden
        
        public CircularBufferFeature(CircularBufferFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CircularBuffer", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="circular buffer should not exceed its capacity")]
        [Xunit.TraitAttribute("FeatureTitle", "CircularBuffer")]
        [Xunit.TraitAttribute("Description", "circular buffer should not exceed its capacity")]
        [Xunit.TraitAttribute("Category", "circular-buffer")]
        public async System.Threading.Tasks.Task CircularBufferShouldNotExceedItsCapacity()
        {
            string[] tagsOfScenario = new string[] {
                    "circular-buffer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("circular buffer should not exceed its capacity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await testRunner.GivenAsync("capacity of 100", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
    await testRunner.WhenAsync("add 110 message", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
    await testRunner.ThenAsync("buffer count should be 100", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
    await testRunner.AndAsync("dropped message count should be 10", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="circular buffer keeps the most recent message and drops most old message when pro" +
            "ducer rate is higher")]
        [Xunit.TraitAttribute("FeatureTitle", "CircularBuffer")]
        [Xunit.TraitAttribute("Description", "circular buffer keeps the most recent message and drops most old message when pro" +
            "ducer rate is higher")]
        [Xunit.TraitAttribute("Category", "circular-buffer")]
        public async System.Threading.Tasks.Task CircularBufferKeepsTheMostRecentMessageAndDropsMostOldMessageWhenProducerRateIsHigher()
        {
            string[] tagsOfScenario = new string[] {
                    "circular-buffer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("circular buffer keeps the most recent message and drops most old message when pro" +
                    "ducer rate is higher", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
    await testRunner.GivenAsync("capacity of 100", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Step",
                            "ProducerRate",
                            "ConsumerRate",
                            "Message"});
                table1.AddRow(new string[] {
                            "1",
                            "50",
                            "30",
                            "one"});
                table1.AddRow(new string[] {
                            "2",
                            "50",
                            "30",
                            "two"});
                table1.AddRow(new string[] {
                            "3",
                            "50",
                            "30",
                            "three"});
                table1.AddRow(new string[] {
                            "4",
                            "50",
                            "30",
                            "four"});
                table1.AddRow(new string[] {
                            "5",
                            "50",
                            "30",
                            "five"});
                table1.AddRow(new string[] {
                            "6",
                            "50",
                            "30",
                            "six"});
                table1.AddRow(new string[] {
                            "7",
                            "50",
                            "30",
                            "seven"});
                table1.AddRow(new string[] {
                            "8",
                            "50",
                            "30",
                            "eight"});
                table1.AddRow(new string[] {
                            "9",
                            "50",
                            "30",
                            "nine"});
                table1.AddRow(new string[] {
                            "10",
                            "50",
                            "30",
                            "ten"});
#line 14
    await testRunner.WhenAsync("perform the following iterations", ((string)(null)), table1, "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("buffer count should be 100", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Message",
                            "Count"});
                table2.AddRow(new string[] {
                            "ten",
                            "50"});
                table2.AddRow(new string[] {
                            "nine",
                            "50"});
#line 27
    await testRunner.AndAsync("the messages in buffer should be", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CircularBufferFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CircularBufferFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
