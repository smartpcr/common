// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Cache.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "unit_test")]
    public partial class CircularBufferFeature : object, Xunit.IClassFixture<CircularBufferFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "unit_test"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CircularBuffer.feature"
#line hidden
        
        public CircularBufferFeature(CircularBufferFeature.FixtureData fixtureData, Common_Cache_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CircularBuffer", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="circular buffer should not exceed its capacity")]
        [Xunit.TraitAttribute("FeatureTitle", "CircularBuffer")]
        [Xunit.TraitAttribute("Description", "circular buffer should not exceed its capacity")]
        [Xunit.TraitAttribute("Category", "circular-buffer")]
        public void CircularBufferShouldNotExceedItsCapacity()
        {
            string[] tagsOfScenario = new string[] {
                    "circular-buffer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("circular buffer should not exceed its capacity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    testRunner.Given("capacity of 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.When("add 110 message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
    testRunner.Then("buffer count should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
    testRunner.And("dropped message count should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="circular buffer keeps the most recent message and drops most old message when pro" +
            "ducer rate is higher")]
        [Xunit.TraitAttribute("FeatureTitle", "CircularBuffer")]
        [Xunit.TraitAttribute("Description", "circular buffer keeps the most recent message and drops most old message when pro" +
            "ducer rate is higher")]
        [Xunit.TraitAttribute("Category", "circular-buffer")]
        public void CircularBufferKeepsTheMostRecentMessageAndDropsMostOldMessageWhenProducerRateIsHigher()
        {
            string[] tagsOfScenario = new string[] {
                    "circular-buffer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("circular buffer keeps the most recent message and drops most old message when pro" +
                    "ducer rate is higher", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
    testRunner.Given("capacity of 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "ProducerRate",
                            "ConsumerRate",
                            "Message"});
                table1.AddRow(new string[] {
                            "1",
                            "50",
                            "30",
                            "one"});
                table1.AddRow(new string[] {
                            "2",
                            "50",
                            "30",
                            "two"});
                table1.AddRow(new string[] {
                            "3",
                            "50",
                            "30",
                            "three"});
                table1.AddRow(new string[] {
                            "4",
                            "50",
                            "30",
                            "four"});
                table1.AddRow(new string[] {
                            "5",
                            "50",
                            "30",
                            "five"});
                table1.AddRow(new string[] {
                            "6",
                            "50",
                            "30",
                            "six"});
                table1.AddRow(new string[] {
                            "7",
                            "50",
                            "30",
                            "seven"});
                table1.AddRow(new string[] {
                            "8",
                            "50",
                            "30",
                            "eight"});
                table1.AddRow(new string[] {
                            "9",
                            "50",
                            "30",
                            "nine"});
                table1.AddRow(new string[] {
                            "10",
                            "50",
                            "30",
                            "ten"});
#line 14
    testRunner.When("perform the following iterations", ((string)(null)), table1, "When ");
#line hidden
#line 26
    testRunner.Then("buffer count should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Message",
                            "Count"});
                table2.AddRow(new string[] {
                            "ten",
                            "50"});
                table2.AddRow(new string[] {
                            "nine",
                            "50"});
#line 27
    testRunner.And("the messages in buffer should be", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CircularBufferFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CircularBufferFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
